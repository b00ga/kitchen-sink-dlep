---
driver:
  name: vagrant

provisioner:
  name: ansible_playbook
  hosts: all
  require_chef_for_busser: false
  additional_copy_path: tasks
  ansible_verbose: false
  ansible_verbosity: 4

transport:
  name: ssh
  max_ssh_sessions: 2

platforms:
  - name: centos/7
  - name: centos/6
  - name: fedora/29-cloud-base
    driver:
     customize:
       memory: 1024 
  - name: fedora/28-cloud-base
    driver:
     customize:
       memory: 1024 
  - name: ubuntu/bionic64
    driver:
     customize:
       memory: 2048 
  - name: ubuntu/xenial64
  - name: ubuntu/trusty64
    driver:
     customize:
       memory: 1024 
  - name: debian/stretch64
  - name: debian/jessie64
  - name: opensuse/openSUSE-42.3-x86_64
    provisioner:
      python_sles_repo: ''
      #python_sles_repo: http://download.opensuse.org/repositories/devel:/languages:/python/openSUSE_Leap_42.3/devel:languages:python.repo
      ansible_sles_repo: http://download.opensuse.org/repositories/systemsmanagement/openSUSE_Leap_42.3/systemsmanagement.repo
  - name: opensuse/openSUSE-15.0-x86_64
    provisioner:
      ansible_extra_flags: -e 'ansible_python_interpreter="/usr/bin/python3"'
      python_sles_repo: https://download.opensuse.org/repositories/devel:/languages:/python/openSUSE_Leap_15.0/devel:languages:python.repo
      ansible_sles_repo: http://download.opensuse.org/repositories/systemsmanagement/openSUSE_Leap_15.0/systemsmanagement.repo
      custom_pre_install_command: |
          sudo zypper install -y branding-openSUSE
  - name: generic/alpine38
    driver:
      vm_hostname: false
    provisioner:
      ansible_extra_flags: -e 'ansible_python_interpreter="/usr/bin/env python3"'
  - name: generic/alpine37
    driver:
      vm_hostname: false
    provisioner:
      custom_pre_install_command: |
         sudo apk update && \
         sudo apk add py2-pip py2-pynacl@edge py2-paramiko py2-jinja2 py2-yaml && \
         sudo pip2 install ansible
  - name: generic/alpine36
    driver:
      vm_hostname: false
    provisioner:
      custom_pre_install_command: |
         sudo apk update && \
         sudo apk add py2-pip py2-pynacl@edge py2-paramiko py2-jinja2 py2-yaml && \
         sudo pip2 install ansible
  - name: generic/arch
    provisioner:
      custom_pre_install_command: |
         sudo /usr/bin/pacman -Syyu --noconfirm && \
         sudo /usr/bin/pacman -S --verbose --noconfirm ansible
  - name: generic/freebsd12
    provisioner:
      custom_pre_install_command: sudo pkg install -y py27-ansible
      ansible_extra_flags: -e 'ansible_python_interpreter="/usr/bin/env python2.7"'
  - name: generic/freebsd11
    provisioner:
      custom_pre_install_command: sudo pkg install -y py27-ansible
      ansible_extra_flags: -e 'ansible_python_interpreter="/usr/bin/env python2.7"'
  - name: generic/openbsd6
    provisioner:
      # Use faster mirror than comes default in the vagrant image
      custom_pre_install_command: |
         echo 	https://fastly.cdn.openbsd.org/pub/OpenBSD/ | sudo tee /etc/installurl
      ansible_extra_flags: -e 'ansible_python_interpreter="/usr/bin/env python2.7"'
  #- name: dragonflybsd/dragonfly520
  - name: generic/dragonflybsd5
    driver:
     customize:
       memory: 2048
    provisioner:
      # sed statement flips package mirror from slow master mirror to NYCBUG mirror
      custom_pre_install_command: |
         sudo sed -i.bak -e 's/enabled.*yes/enabled : no/' \
           -e '/^NYCBUG/{n;n;s/no/yes/;}' /usr/local/etc/pkg/repos/df-latest.conf && \
         sudo pkg install -y py27-ansible
      ansible_extra_flags: -e 'ansible_python_interpreter="/usr/local/bin/python2.7"'
  - name: generic/netbsd8
    provisioner:
      custom_pre_install_command: |
          sudo sed -i -e 's/^http/#http/' /usr/pkg/etc/pkgin/repositories.conf
          echo http://cdn.netbsd.org/pub/pkgsrc/packages/NetBSD/amd64/8.0_2018Q4/All | sudo tee -a /usr/pkg/etc/pkgin/repositories.conf
          sudo pkgin -y update
          sudo pkgin -y install ansible 
      ansible_extra_flags: -e 'ansible_python_interpreter="/usr/pkg/bin/python2.7"'
  - name: mcandre/vagrant-netbsd-cmake-amd64
    provisioner:
      custom_pre_install_command: |
         sudo PKG_PATH="ftp://ftp.netbsd.org/pub/pkgsrc/packages/NetBSD/x86_64/7.1_2018Q4/All/" pkg_add ansible pkgin sudo
         sudo mozilla-rootcerts install > /dev/null
         # mcandre's boxes, /bin/sudo us a shell script wrapper around /bin/su
         # This shell script fails to pass kitchen-vagrant args correctly so we need real sudo
         echo 'vagrant ALL=(ALL) NOPASSWD: ALL' | sudo tee /usr/pkg/etc/sudoers.d/vagrant
         /usr/pkg/bin/sudo sh -c '[ -f /bin/sudo ] && rm -f /bin/sudo'
      ansible_extra_flags: -e 'ansible_python_interpreter="/usr/pkg/bin/python2.7"'
  - name: luminositylabsllc/omniosce-r151026
    driver:
     vm_hostname: false
     customize:
       memory: 2048
    provisioner:
      custom_pre_install_command: |
        # luminositylabsllc boxes have static /etc/resolv.conf
        # Found dhcpinfo commands to get it from DHCP from the following blog post:
        # https://sysdef.xyz/post/2012-10-21-omnios-dns-on-aws
        echo "domain $(dhcpinfo DNSdmain)" | pfexec tee /etc/resolv.conf
        echo "nameserver $(dhcpinfo DNSserv)" | pfexec tee -a  /etc/resolv.conf
        # Ansible isn't available from any of the common IPS repos
        # Install pkgsrc/pkgin and use those packages to get ansible
        if [ ! -f bootstrap-2018Q4-x86_64.tar.gz ]; then curl -O https://pkgsrc.joyent.com/packages/SmartOS/bootstrap/bootstrap-2018Q4-x86_64.tar.gz ; fi
        if [ ! -d /opt/local ]; then pfexec tar -zxpf bootstrap-2018Q4-x86_64.tar.gz -C / ; fi
        pfexec /opt/local/bin/pkgin -y update
        pfexec /opt/local/bin/pkgin -y install ansible
      ansible_binary_path: /opt/local/bin
      #ansible_extra_flags: -e 'ansible_python_interpreter="/usr/pkg/bin/python2.7"'
  - name: luminositylabsllc/omniosce-r151022s
    driver:
     vm_hostname: false
     customize:
       memory: 2048
    provisioner:
      custom_pre_install_command: |
        # luminositylabsllc boxes have static /etc/resolv.conf
        # Found dhcpinfo commands to get it from DHCP from the following blog post:
        # https://sysdef.xyz/post/2012-10-21-omnios-dns-on-aws
        echo "domain $(dhcpinfo DNSdmain)" | pfexec tee /etc/resolv.conf
        echo "nameserver $(dhcpinfo DNSserv)" | pfexec tee -a  /etc/resolv.conf
        # Ansible isn't available from any of the common IPS repos
        # Install pkgsrc/pkgin and use those packages to get ansible
        if [ ! -f bootstrap-2018Q4-x86_64.tar.gz ]; then curl -O https://pkgsrc.joyent.com/packages/SmartOS/bootstrap/bootstrap-2018Q4-x86_64.tar.gz ; fi
        if [ ! -d /opt/local ]; then pfexec tar -zxpf bootstrap-2018Q4-x86_64.tar.gz -C / ; fi
        pfexec /opt/local/bin/pkgin -y update
        pfexec /opt/local/bin/pkgin -y install ansible
      ansible_binary_path: /opt/local/bin
      #ansible_extra_flags: -e 'ansible_python_interpreter="/usr/pkg/bin/python2.7"'
  - name: openindiana/hipster
    driver:
     vm_hostname: false
    provisioner:
      custom_pre_install_command: |
        if [ ! -f bootstrap-2018Q4-x86_64.tar.gz ]; then curl -O https://pkgsrc.joyent.com/packages/SmartOS/bootstrap/bootstrap-2018Q4-x86_64.tar.gz ; fi
        if [ ! -d /opt/local ]; then pfexec tar -zxpf bootstrap-2018Q4-x86_64.tar.gz -C / ; fi
        pfexec /opt/local/bin/pkgin -y update
        pfexec /opt/local/bin/pkgin -y install ansible
      ansible_binary_path: /opt/local/bin

suites:
  - name: default

verifier:
#  name: shell
#  remote_exec: true
#  command: env


